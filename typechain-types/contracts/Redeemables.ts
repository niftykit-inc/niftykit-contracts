/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace Redeemables {
  export type RedeemableStruct = {
    tokenURI: string;
    price: BigNumberish;
    maxQuantity: BigNumberish;
    maxPerWallet: BigNumberish;
    maxPerMint: BigNumberish;
    redeemedCount: BigNumberish;
    merkleRoot: BytesLike;
    active: boolean;
    nonce: BigNumberish;
  };

  export type RedeemableStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    boolean,
    BigNumber
  ] & {
    tokenURI: string;
    price: BigNumber;
    maxQuantity: BigNumber;
    maxPerWallet: BigNumber;
    maxPerMint: BigNumber;
    redeemedCount: BigNumber;
    merkleRoot: string;
    active: boolean;
    nonce: BigNumber;
  };
}

export interface RedeemablesInterface extends utils.Interface {
  functions: {
    "redeemableAt(uint256)": FunctionFragment;
    "totalRedeemables()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "redeemableAt" | "totalRedeemables"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "redeemableAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRedeemables",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "redeemableAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRedeemables",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "RedeemableCreated(uint256)": EventFragment;
    "TokenRedeemed(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemableCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRedeemed"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RedeemableCreatedEventObject {
  redeemableId: BigNumber;
}
export type RedeemableCreatedEvent = TypedEvent<
  [BigNumber],
  RedeemableCreatedEventObject
>;

export type RedeemableCreatedEventFilter =
  TypedEventFilter<RedeemableCreatedEvent>;

export interface TokenRedeemedEventObject {
  to: string;
  redeemableId: BigNumber;
  quantity: BigNumber;
}
export type TokenRedeemedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TokenRedeemedEventObject
>;

export type TokenRedeemedEventFilter = TypedEventFilter<TokenRedeemedEvent>;

export interface Redeemables extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RedeemablesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    redeemableAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [Redeemables.RedeemableStructOutput] & {
        data: Redeemables.RedeemableStructOutput;
      }
    >;

    totalRedeemables(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  redeemableAt(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Redeemables.RedeemableStructOutput>;

  totalRedeemables(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    redeemableAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Redeemables.RedeemableStructOutput>;

    totalRedeemables(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RedeemableCreated(uint256)"(
      redeemableId?: BigNumberish | null
    ): RedeemableCreatedEventFilter;
    RedeemableCreated(
      redeemableId?: BigNumberish | null
    ): RedeemableCreatedEventFilter;

    "TokenRedeemed(address,uint256,uint256)"(
      to?: string | null,
      redeemableId?: BigNumberish | null,
      quantity?: null
    ): TokenRedeemedEventFilter;
    TokenRedeemed(
      to?: string | null,
      redeemableId?: BigNumberish | null,
      quantity?: null
    ): TokenRedeemedEventFilter;
  };

  estimateGas: {
    redeemableAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalRedeemables(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    redeemableAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRedeemables(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
